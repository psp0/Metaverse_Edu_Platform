%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c15688e9732cf49ef8f9f236dd0808d8, type: 3}
  m_Name: QuestionOOP2_Data
  m_EditorClassIdentifier: 
  m_QuestionText:
  - FontSize: 2
    Text: Why might you want to use an extension method in C#?
  m_QuestionImage: {fileID: 0}
  m_Skills: Simplify code and make it reusable by correctly implementing the principles
    of inheritance and polymorphism
  m_ShuffleAnswers: 1
  m_Answers:
  - IsCorrect: 1
    Text: In order to add functionality to an existing type without creating a new
      derived type.
  - IsCorrect: 0
    Text: In order to extend the functionality of an existing method using the same
      method name.
  - IsCorrect: 0
    Text: In order to add more parameters to an existing method.
  - IsCorrect: 0
    Text: In order to extend the access of an existing method so it can be accessed
      from other classes.
  m_FeedbackCorrect: Extension methods effectively allow you to add methods to existing
    classes that could otherwise not be edited directly. This means that those classes
    do not need to be recompiled either.
  m_FeedbackIncorrect: Extension methods effectively allow you to add methods to
    existing classes that could otherwise not be edited directly. This means that
    those classes do not need to be recompiled either.
  m_FeedbackLink: 
